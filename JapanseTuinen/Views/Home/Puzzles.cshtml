@model JapanseTuinen.Models.PuzzleViewModel
@{
    ViewBag.Title = "Puzzles";
}

<h2>Nieuwe Puzzel</h2>

<div class="solve-wrapper">
    Save as:
    <input type="text" id="save-puzzle" />
    <br />
    <div class="solve-button btn btn-default">Solve!</div>
</div>

<div class="loaded-puzzle hidden"></div>

<div class="total-puzzle">

    @for (int i = 1; i <= 6; i++)
    {
        {
            <div class="puzzle-field-wrapper">
                <div id="@i" class="outer-puzzle-field hoverable @Model.GetRowClass(i) @Model.GetColumnClass(i)" data-row="@Model.GetRowNumberByIndex(i)" data-column="@Model.GetColumnNumberByIndex(i)">
                    <div id="inner-@i" class="inner-puzzle-field">
                        <div class="add-puzzle-field fa fa-plus fa-4x"></div>
                        <div class="hidden condition-choices">
                            <div class="condition-choice bridge-icon">1</div>
                            <div class="condition-choice tile-icon">3</div>
                            <img class="condition-choice svg-icon gate-icon" data-icon="gate" src="/Content/Icons/gate.svg" />
                            <img class="condition-choice svg-icon tree-icon" data-icon="tree" src="/Content/Icons/tree.svg" />
                            <img class="condition-choice svg-icon butterfly-icon" data-icon="butterfly" src="/Content/Icons/butterfly.svg" />
                            <img class="condition-choice svg-icon flower-icon" data-icon="flower" src="/Content/Icons/flower.svg" />
                            <img class="condition-choice svg-icon yinyang-icon" data-icon="yinyang" src="/Content/Icons/yinyang.svg" />
                            <img class="condition-choice svg-icon pagoda-icon" data-icon="pagoda" src="/Content/Icons/pagoda.svg" />
                        </div>
                        <input type="text" class="road-text-input input-inner-@i hidden" autofocus />
                    </div>

                </div>
            </div>
        }
    }
</div>

<div class="known-puzzles">
    @if (Model.KnownPuzzles.Any())
    {
        foreach (var p in Model.KnownPuzzles)
        {
            <div class="known-puzzle" id="@p">@p</div>
        }
    }
    else
    {
        <span class="alert alert-info">No known puzzles!</span>
    }
</div>

<div class="solved-puzzle-wrapper">

</div>

<script type="text/javascript">

    $(document).off('click', '.known-puzzle').on('click', '.known-puzzle', function () {

        var puzzleName = $(this).attr('id');

        $.ajax({
            type: 'POST',
            //dataType: 'json',
            url: '/Home/LoadPuzzle',
            data: {
                puzzleName: puzzleName
            },
        }).always(function (result) {
            //$('.solved-puzzle-wrapper').html(result.responseText);
            $('.total-puzzle').addClass('hidden');
            $('.loaded-puzzle').html(result);
            $('.loaded-puzzle').removeClass('hidden');

            allShownIds = [];
            $('.shown-puzzle-field').each(function (i, e) {
                var currentId = parseInt($(e).attr('id'));
                allShownIds.push(currentId);
            });
            //debugger;
            $('.shown-puzzle-field').each(function (i, e) {
                var currentId = parseInt($(e).attr('id'));
                removeRoadsBasedOnLastUpdate(currentId);
            });
        });
    });

    $(document).off('click', '.solve-button').on('click', '.solve-button', function () {

        var PuzzleVM = {
            TileIndexList: {
                TileInfoList: {}
            }
        };

        $('.shown-puzzle-field').each(function (i, e) {
            var currentItem = $(e);
            var currentId = parseInt(currentItem.attr('id'));

            var newTile = {
                Index: (currentId),
                TileInfoList: {}
            }
            PuzzleVM.TileIndexList[i] = newTile;

            $(currentItem).children('.confirmed-condition').each(function (j, e) {
                var position = $(e).data('position');
                var condition = $(e).data('condition');
                var value = $(e).data('amount');

                var amount = 0;
                if (value !== undefined) {
                    amount = parseInt(value);
                }

                var tileInfo = {
                    Position: position,
                    Amount: amount,
                    Condition: condition
                }

                PuzzleVM.TileIndexList[i].TileInfoList[j] = tileInfo;
            });
        });

        PuzzleVM.Name = 'Puzzle ' +  $('#save-puzzle').val();
        //console.log(PuzzleVM);

        $.ajax({
            type: 'POST',
            dataType: 'json',
            url: '/Home/SolvePuzzle',
            data: PuzzleVM,
        }).always(function (result) {
            $('.solved-puzzle-wrapper').html(result.responseText);

            for (var i = 1; i < 9; i++) {
                $('#inner-' + i).append($('#solved-' + i));
            }

        });
    });

    var currentRoadEndPosition;
    var currentRoadEndOrientation;

    $(document).off('click', '.road-end').on('click', '.road-end', function () {
        var roadEnd = $(this);
        var conditionChoices = roadEnd.parent().find('.condition-choices');

        conditionChoices.removeClass('hidden');
        $(conditionChoices).data('road-end-position', roadEnd.data('position'));
    });

    $(document).off('click', '.condition-choice').on('click', '.condition-choice', function () {

        var conditionChoices = $(this).parent('.condition-choices');
        var outerPuzzleField = $(this).closest('.outer-puzzle-field');
        var innerPuzzleField = $(this).closest('.inner-puzzle-field');
        var choice = $(this);

        var position = $(conditionChoices).data('road-end-position');
        outerPuzzleField.children('.road-end').each(function (i, e) {
            if ($(e).data('position') == position) {
                var addedClass = 'road-end-' + position;
                if (choice.hasClass('svg-icon')) {
                    var iconClass = choice.data('icon');
                    $(e).replaceWith('<img class="' + addedClass +
                        ' confirmed-condition condition-choice svg-icon ' +
                        iconClass +
                        '-icon" src="/Content/Icons/' + iconClass +
                        '.svg" data-position="' + position +
                        '" data-condition="' + iconClass + '" />');
                }
                if (choice.hasClass('bridge-icon')) {
                    $(e).replaceWith('<div class="' + addedClass +
                        ' confirmed-condition condition-choice bridge-road-end' +
                        '" data-position="' + position +
                        '" data-condition=bridge />');
                }
                if (choice.hasClass('tile-icon')) {
                    $(e).replaceWith('<div class="' + addedClass +
                        ' confirmed-condition condition-choice tile-road-end' +
                        '" data-position="' + position +
                        '" data-condition=tile />');
                }
                if (choice.hasClass('tile-icon') || choice.hasClass('bridge-icon')) {
                    $('.input-' + innerPuzzleField.attr('id')).removeClass('hidden');
                    $('.road-text-input').data('position', position);
                    $('.road-text-input').focus();
                }
            }

        });

        conditionChoices.addClass('hidden');

    });

    $(document).on('focusout', '.road-text-input', function () {
        if ($(this).val() !== "") {
            var position = $(this).data('position');
            var outerPuzzleField = $(this).closest('.outer-puzzle-field');
            var roadEnd = outerPuzzleField.find('.road-end-' + position);
            roadEnd.data('amount', $(this).val());
            roadEnd.append($(this).val());
            $(this).val("");
            $(this).addClass('hidden');
        }
    });

    var allShownIds = [];
    $(document).off('click', '.hoverable').on('click', '.hoverable', function () {
        var clickedElement = $(this);
        var clickedId = parseInt($(clickedElement).attr('id'));
        var continueClick = false;

        if (allShownIds.length === 0) {
            allShownIds.push(parseInt(clickedId));
            continueClick = true;
        }

        $(allShownIds).each(function (i, e) {
            if (clickedId - 1 == parseInt(e) || clickedId - 3 == parseInt(e) || clickedId + 3 == parseInt(e) || clickedId + 1 == parseInt(e)) {
                continueClick = true;
            }
        });

        if (continueClick) {
            if ($.inArray(clickedId, allShownIds) == -1) {
                allShownIds.push(clickedId);
            }

            $(clickedElement).removeClass('hidden');
            $(clickedElement).removeClass('hoverable');
            $(clickedElement).addClass('shown-puzzle-field');
            $(clickedElement).find('.add-puzzle-field').remove();
            $(document).off('mouseleave', '.hoverable');

            addRoadsToElement(clickedElement);
            removeRoadsBasedOnLastUpdate(clickedId);
        }
    });

    function addRoadsToElement(puzzleField) {
        $(puzzleField).append('<div class="road-end road-end-top road-end-vertical road-end-1 road-end-all-sides" data-position="1"></div>');
        $(puzzleField).append('<div class="road-end road-end-top road-end-vertical road-end-2 road-end-all-sides" data-position="2"></div>');
        $(puzzleField).append('<div class="road-end road-end-right road-end-horizontal road-end-3 road-end-all-sides" data-position="3"></div>');
        $(puzzleField).append('<div class="road-end road-end-right road-end-horizontal road-end-4 road-end-all-sides" data-position="4""></div>');
        $(puzzleField).append('<div class="road-end road-end-bottom road-end-vertical road-end-5 road-end-all-sides" data-position="5"></div>');
        $(puzzleField).append('<div class="road-end road-end-bottom road-end-vertical road-end-6 road-end-all-sides" data-position="6"></div>');
        $(puzzleField).append('<div class="road-end road-end-left road-end-horizontal road-end-7 road-end-all-sides" data-position="7"></div>');
        $(puzzleField).append('<div class="road-end road-end-left road-end-horizontal road-end-8 road-end-all-sides" data-position="8"></div>');
    };

    function RemoveRoadsSideFromClickedElement(clickedElement, loopElement, side) {

        var oppositeSide = "";
        if (side == "left") {
            oppositeSide = "right";
        }
        if (side == "right") {
            oppositeSide = "left";
        }
        if (side == "top") {
            oppositeSide = "bottom";
        }
        if (side == "bottom") {
            oppositeSide = "top";
        }

        $(clickedElement).children('.road-end').each(function (i, e) {
            if ($(e).hasClass('road-end-' + side)) {
                $(e).remove();
            }
        });

        if (side == "left" || side == "right") {
            $(clickedElement).children('.road-end').each(function (i, e) {
                if ($(e).hasClass('road-end-top') || $(e).hasClass('road-end-bottom')) {

                    if ($(e).hasClass('road-end-all-sides')) {
                        $(e).removeClass('road-end-all-sides');
                        $(e).addClass('road-end-no-' + side + '-side');
                    }
                    else if ($(e).hasClass('road-end-no-' + oppositeSide + '-side')) {
                        $(e).removeClass('road-end-no-' + oppositeSide + '-side');
                        $(e).addClass('road-end-no-sides');
                    }
                }
            });

            $(loopElement).children('.road-end').each(function (i, e) {
                if ($(e).hasClass('road-end-top') || $(e).hasClass('road-end-bottom')) {

                    if ($(e).hasClass('road-end-all-sides')) {
                        $(e).removeClass('road-end-all-sides');
                        $(e).addClass('road-end-no-' + oppositeSide + '-side');
                    }
                    else if ($(e).hasClass('road-end-no-' + side + '-side')) {
                        $(e).removeClass('road-end-no-' + side + '-side');
                        $(e).addClass('road-end-no-sides');
                    }
                }
            });
        }

        if (side == "top" || side == "bottom") {
            $(clickedElement).children('.road-end').each(function (i, e) {
                if ($(e).hasClass('road-end-left') || $(e).hasClass('road-end-right')) {
                    if ($(e).hasClass('road-end-all-sides')) {
                        $(e).removeClass('road-end-all-sides');
                        $(e).addClass('road-end-no-' + side + '-side');
                    }
                    else if ($(e).hasClass('road-end-no-' + oppositeSide + '-side')) {
                        $(e).removeClass('road-end-no-' + oppositeSide + '-side');
                        $(e).addClass('road-end-no-sides');
                    }
                }
            });

            $(loopElement).children('.road-end').each(function (i, e) {
                if ($(e).hasClass('road-end-left') || $(e).hasClass('road-end-right')) {

                    if ($(e).hasClass('road-end-all-sides')) {
                        $(e).removeClass('road-end-all-sides');
                        $(e).addClass('road-end-no-' + oppositeSide + '-side');
                    }
                    else if ($(e).hasClass('road-end-no-' + side + '-side')) {
                        $(e).removeClass('road-end-no-' + side + '-side');
                        $(e).addClass('road-end-no-sides');
                    }
                }
            });

        }

        $(loopElement).children('.road-end').each(function (i, e) {
            if ($(e).hasClass('road-end-' + oppositeSide)) {
                $(e).remove();
            }
            //$(e).removeClass('road-end-all-sides');
            //$(e).addClass('road-end-no-' + oppositeSide + '-side');
        });
        var calcWidth = 220;
        if ($(clickedElement).find('.road-end-left').length !== 2) {
            calcWidth -= 20;
        }
        if ($(clickedElement).find('.road-end-right').length !== 2) {
            calcWidth -= 20;
        }

        var calcHeight = 220;
        if ($(clickedElement).find('.road-end-top').length !== 2) {
            calcHeight -= 20;
        }
        if ($(clickedElement).find('.road-end-bottom').length !== 2) {
            calcHeight -= 20;
        }

        $(clickedElement).css('width', calcWidth);
        $(clickedElement).css('height', calcHeight);
        $(clickedElement).find('.inner-puzzle-field').css('margin-' + side, '0');

        var calcLoopWidth = 220;
        if ($(loopElement).find('.road-end-left').length !== 2) {
            calcLoopWidth -= 20;
        }
        if ($(loopElement).find('.road-end-right').length !== 2) {
            calcLoopWidth -= 20;
        }

        var calcLoopHeight = 220;
        if ($(loopElement).find('.road-end-top').length !== 2) {
            calcLoopHeight -= 20;
        }
        if ($(loopElement).find('.road-end-bottom').length !== 2) {
            calcLoopHeight -= 20;
        }

        $(loopElement).css('width', calcLoopWidth);
        $(loopElement).css('height', calcLoopHeight);
        $(loopElement).find('.inner-puzzle-field').css('margin-' + oppositeSide, '0');
    }

    function removeRoadsBasedOnLastUpdate(clickedId) {
        var clickedElement = $('#' + clickedId);
        var clickedRow = $(clickedElement).data('row');
        var clickedCol = $(clickedElement).data('column');

        if (clickedId == 1) {
            if ($.inArray(4, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#4'), "bottom");
            }

            if ($.inArray(2, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#2'), "right");
            }
        }
        if (clickedId == 2) {
            if ($.inArray(1, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#1'), "left");
            }
            if ($.inArray(3, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#3'), "right");
            }
            if ($.inArray(5, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#5'), "bottom");
            }
        }
        if (clickedId == 3) {

            if ($.inArray(2, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#2'), "left");
            }
            if ($.inArray(6, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#6'), "bottom");
            }
        }
        if (clickedId == 4) {
            if ($.inArray(1, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#1'), "top");
            }
            if ($.inArray(5, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#5'), "right");
            }
        }
        if (clickedId == 5) {
            if ($.inArray(4, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#4'), "left");
            }
            if ($.inArray(6, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#6'), "right");
            }

            if ($.inArray(2, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#2'), "top");
            }
        }
        if (clickedId == 6) {
            if ($.inArray(3, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#3'), "top");
            }
            if ($.inArray(5, allShownIds) !== -1) {
                RemoveRoadsSideFromClickedElement(clickedElement, $('#5'), "left");
            }
        }

        $('.shown-puzzle-field').each(function (i, e) {
            var roadsTop = $(e).find('.road-end-top').length === 2;
            var roadsLeft = $(e).find('.road-end-left').length === 2;
            var roadsRight = $(e).find('.road-end-right').length === 2;
            var column = $(e).data('column');
            var row = $(e).data('row');

            if (row === 2) {
                if (roadsTop) {
                    $(e).css('top', '180px');
                }
                else {
                    $(e).css('top', '200px');
                }
            }

            if (column === 1) {
                if (roadsRight) {
                    if ($('.shown-puzzle-field.row-one').length >= 2 || $('.shown-puzzle-field.row-two').length >= 2) {
                        $(e).css('left', '40px');
                    }
                    else {
                        $(e).css('left', '20px');
                    }
                }
                else {
                    $(e).css('left', '40px');
                }
            }

            if (column === 2) {
                if (roadsLeft) {
                    if ($('.shown-puzzle-field.row-one').length === 3 || $('.shown-puzzle-field.row-two').length === 3) {
                        $(e).css('left', '220px');
                    }
                }
                else if (!roadsLeft) {
                    $(e).css('left', '240px');
                }
            }

            if (column === 3) {
                if (roadsLeft) {
                    if ($('.shown-puzzle-field.row-one').length >= 2 || $('.shown-puzzle-field.row-two').length >= 2) {
                        $(e).css('left', '400px');
                    }
                    else {
                        $(e).css('left', '420px');
                    }
                }
                else {
                    if ($('.shown-puzzle-field.row-one').length === 3 || $('.shown-puzzle-field.row-two').length === 3) {
                        $(e).css('left', '420px');
                    }
                    else {
                        $(e).css('left', '420px');
                    }
                }
            }

        });
    }

</script>